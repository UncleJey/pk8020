// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2021 18:42:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Scheme
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Scheme_vlg_sample_tst(
	A1,
	ACCESS,
	B1,
	C1,
	GND,
	M20,
	MODSEL,
	sampler_tx
);
input  A1;
input  ACCESS;
input  B1;
input  C1;
input  GND;
input  M20;
input  MODSEL;
output sampler_tx;

reg sample;
time current_time;
always @(A1 or ACCESS or B1 or C1 or GND or M20 or MODSEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Scheme_vlg_check_tst (
	M1,
	M1_25,
	M2,
	M2_5,
	M4,
	M5,
	M10,
	M_2_5,
	nCAS,
	nF1T,
	nF2T,
	nRAS,
	sampler_rx
);
input  M1;
input  M1_25;
input  M2;
input  M2_5;
input  M4;
input  M5;
input  M10;
input  M_2_5;
input  nCAS;
input  nF1T;
input  nF2T;
input  nRAS;
input sampler_rx;

reg  M1_expected;
reg  M1_25_expected;
reg  M2_expected;
reg  M2_5_expected;
reg  M4_expected;
reg  M5_expected;
reg  M10_expected;
reg  M_2_5_expected;
reg  nCAS_expected;
reg  nF1T_expected;
reg  nF2T_expected;
reg  nRAS_expected;

reg  M1_prev;
reg  M1_25_prev;
reg  M2_prev;
reg  M2_5_prev;
reg  M4_prev;
reg  M5_prev;
reg  M10_prev;
reg  M_2_5_prev;
reg  nCAS_prev;
reg  nF1T_prev;
reg  nF2T_prev;
reg  nRAS_prev;

reg  M1_expected_prev;
reg  M1_25_expected_prev;
reg  M2_expected_prev;
reg  M2_5_expected_prev;
reg  M4_expected_prev;
reg  M5_expected_prev;
reg  M10_expected_prev;
reg  M_2_5_expected_prev;
reg  nCAS_expected_prev;
reg  nF1T_expected_prev;
reg  nF2T_expected_prev;
reg  nRAS_expected_prev;

reg  last_M1_exp;
reg  last_M1_25_exp;
reg  last_M2_exp;
reg  last_M2_5_exp;
reg  last_M4_exp;
reg  last_M5_exp;
reg  last_M10_exp;
reg  last_M_2_5_exp;
reg  last_nCAS_exp;
reg  last_nF1T_exp;
reg  last_nF2T_exp;
reg  last_nRAS_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	M1_prev = M1;
	M1_25_prev = M1_25;
	M2_prev = M2;
	M2_5_prev = M2_5;
	M4_prev = M4;
	M5_prev = M5;
	M10_prev = M10;
	M_2_5_prev = M_2_5;
	nCAS_prev = nCAS;
	nF1T_prev = nF1T;
	nF2T_prev = nF2T;
	nRAS_prev = nRAS;
end

// update expected /o prevs

always @(trigger)
begin
	M1_expected_prev = M1_expected;
	M1_25_expected_prev = M1_25_expected;
	M2_expected_prev = M2_expected;
	M2_5_expected_prev = M2_5_expected;
	M4_expected_prev = M4_expected;
	M5_expected_prev = M5_expected;
	M10_expected_prev = M10_expected;
	M_2_5_expected_prev = M_2_5_expected;
	nCAS_expected_prev = nCAS_expected;
	nF1T_expected_prev = nF1T_expected;
	nF2T_expected_prev = nF2T_expected;
	nRAS_expected_prev = nRAS_expected;
end



// expected M4
initial
begin
	M4_expected = 1'bX;
end 

// expected M2
initial
begin
	M2_expected = 1'bX;
end 

// expected M1
initial
begin
	M1_expected = 1'bX;
end 

// expected M10
initial
begin
	M10_expected = 1'bX;
end 

// expected M5
initial
begin
	M5_expected = 1'bX;
end 

// expected M2_5
initial
begin
	M2_5_expected = 1'bX;
end 

// expected M1_25
initial
begin
	M1_25_expected = 1'bX;
end 

// expected M_2_5
initial
begin
	M_2_5_expected = 1'bX;
end 

// expected nCAS
initial
begin
	nCAS_expected = 1'bX;
end 

// expected nF1T
initial
begin
	nF1T_expected = 1'bX;
end 

// expected nF2T
initial
begin
	nF2T_expected = 1'bX;
end 

// expected nRAS
initial
begin
	nRAS_expected = 1'bX;
end 
// generate trigger
always @(M1_expected or M1 or M1_25_expected or M1_25 or M2_expected or M2 or M2_5_expected or M2_5 or M4_expected or M4 or M5_expected or M5 or M10_expected or M10 or M_2_5_expected or M_2_5 or nCAS_expected or nCAS or nF1T_expected or nF1T or nF2T_expected or nF2T or nRAS_expected or nRAS)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected M1 = %b | expected M1_25 = %b | expected M2 = %b | expected M2_5 = %b | expected M4 = %b | expected M5 = %b | expected M10 = %b | expected M_2_5 = %b | expected nCAS = %b | expected nF1T = %b | expected nF2T = %b | expected nRAS = %b | ",M1_expected_prev,M1_25_expected_prev,M2_expected_prev,M2_5_expected_prev,M4_expected_prev,M5_expected_prev,M10_expected_prev,M_2_5_expected_prev,nCAS_expected_prev,nF1T_expected_prev,nF2T_expected_prev,nRAS_expected_prev);
	$display("| real M1 = %b | real M1_25 = %b | real M2 = %b | real M2_5 = %b | real M4 = %b | real M5 = %b | real M10 = %b | real M_2_5 = %b | real nCAS = %b | real nF1T = %b | real nF2T = %b | real nRAS = %b | ",M1_prev,M1_25_prev,M2_prev,M2_5_prev,M4_prev,M5_prev,M10_prev,M_2_5_prev,nCAS_prev,nF1T_prev,nF2T_prev,nRAS_prev);
`endif
	if (
		( M1_expected_prev !== 1'bx ) && ( M1_prev !== M1_expected_prev )
		&& ((M1_expected_prev !== last_M1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M1_expected_prev);
		$display ("     Real value = %b", M1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_M1_exp = M1_expected_prev;
	end
	if (
		( M1_25_expected_prev !== 1'bx ) && ( M1_25_prev !== M1_25_expected_prev )
		&& ((M1_25_expected_prev !== last_M1_25_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M1_25 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M1_25_expected_prev);
		$display ("     Real value = %b", M1_25_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M1_25_exp = M1_25_expected_prev;
	end
	if (
		( M2_expected_prev !== 1'bx ) && ( M2_prev !== M2_expected_prev )
		&& ((M2_expected_prev !== last_M2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M2_expected_prev);
		$display ("     Real value = %b", M2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_M2_exp = M2_expected_prev;
	end
	if (
		( M2_5_expected_prev !== 1'bx ) && ( M2_5_prev !== M2_5_expected_prev )
		&& ((M2_5_expected_prev !== last_M2_5_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M2_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M2_5_expected_prev);
		$display ("     Real value = %b", M2_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M2_5_exp = M2_5_expected_prev;
	end
	if (
		( M4_expected_prev !== 1'bx ) && ( M4_prev !== M4_expected_prev )
		&& ((M4_expected_prev !== last_M4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M4_expected_prev);
		$display ("     Real value = %b", M4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_M4_exp = M4_expected_prev;
	end
	if (
		( M5_expected_prev !== 1'bx ) && ( M5_prev !== M5_expected_prev )
		&& ((M5_expected_prev !== last_M5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M5_expected_prev);
		$display ("     Real value = %b", M5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_M5_exp = M5_expected_prev;
	end
	if (
		( M10_expected_prev !== 1'bx ) && ( M10_prev !== M10_expected_prev )
		&& ((M10_expected_prev !== last_M10_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M10_expected_prev);
		$display ("     Real value = %b", M10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_M10_exp = M10_expected_prev;
	end
	if (
		( M_2_5_expected_prev !== 1'bx ) && ( M_2_5_prev !== M_2_5_expected_prev )
		&& ((M_2_5_expected_prev !== last_M_2_5_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_2_5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_2_5_expected_prev);
		$display ("     Real value = %b", M_2_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_M_2_5_exp = M_2_5_expected_prev;
	end
	if (
		( nCAS_expected_prev !== 1'bx ) && ( nCAS_prev !== nCAS_expected_prev )
		&& ((nCAS_expected_prev !== last_nCAS_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nCAS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nCAS_expected_prev);
		$display ("     Real value = %b", nCAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_nCAS_exp = nCAS_expected_prev;
	end
	if (
		( nF1T_expected_prev !== 1'bx ) && ( nF1T_prev !== nF1T_expected_prev )
		&& ((nF1T_expected_prev !== last_nF1T_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nF1T :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nF1T_expected_prev);
		$display ("     Real value = %b", nF1T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_nF1T_exp = nF1T_expected_prev;
	end
	if (
		( nF2T_expected_prev !== 1'bx ) && ( nF2T_prev !== nF2T_expected_prev )
		&& ((nF2T_expected_prev !== last_nF2T_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nF2T :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nF2T_expected_prev);
		$display ("     Real value = %b", nF2T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_nF2T_exp = nF2T_expected_prev;
	end
	if (
		( nRAS_expected_prev !== 1'bx ) && ( nRAS_prev !== nRAS_expected_prev )
		&& ((nRAS_expected_prev !== last_nRAS_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port nRAS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", nRAS_expected_prev);
		$display ("     Real value = %b", nRAS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_nRAS_exp = nRAS_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Scheme_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A1;
reg ACCESS;
reg B1;
reg C1;
reg GND;
reg M20;
reg MODSEL;
// wires                                               
wire M1;
wire M1_25;
wire M2;
wire M2_5;
wire M4;
wire M5;
wire M10;
wire M_2_5;
wire nCAS;
wire nF1T;
wire nF2T;
wire nRAS;

wire sampler;                             

// assign statements (if any)                          
Scheme i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.ACCESS(ACCESS),
	.B1(B1),
	.C1(C1),
	.\GND (GND),
	.M1(M1),
	.M1_25(M1_25),
	.M2(M2),
	.M2_5(M2_5),
	.M4(M4),
	.M5(M5),
	.M10(M10),
	.M20(M20),
	.M_2_5(M_2_5),
	.MODSEL(MODSEL),
	.nCAS(nCAS),
	.nF1T(nF1T),
	.nF2T(nF2T),
	.nRAS(nRAS)
);

// M20
always
begin
	M20 = 1'b0;
	M20 = #1000 1'b1;
	#1000;
end 

// ACCESS
initial
begin
	ACCESS = 1'b0;
end 

// A1
initial
begin
	A1 = 1'b1;
end 

// B1
initial
begin
	B1 = 1'b1;
end 

// C1
initial
begin
	C1 = 1'b1;
end 

// GND
initial
begin
	GND = 1'b0;
end 

// MODSEL
initial
begin
	MODSEL = 1'b0;
end 

Scheme_vlg_sample_tst tb_sample (
	.A1(A1),
	.ACCESS(ACCESS),
	.B1(B1),
	.C1(C1),
	.GND(GND),
	.M20(M20),
	.MODSEL(MODSEL),
	.sampler_tx(sampler)
);

Scheme_vlg_check_tst tb_out(
	.M1(M1),
	.M1_25(M1_25),
	.M2(M2),
	.M2_5(M2_5),
	.M4(M4),
	.M5(M5),
	.M10(M10),
	.M_2_5(M_2_5),
	.nCAS(nCAS),
	.nF1T(nF1T),
	.nF2T(nF2T),
	.nRAS(nRAS),
	.sampler_rx(sampler)
);
endmodule

